print(" * * * * * * * * * * * * * * * * * * * * * * * * * * *  * * * * * * * ")
print(" * Durán Breceda Lourdes Jamileth                                   * ")
print(" *                                                                  * ")
print(" * Fecha: 25 de mayo del 2025                                      * ")
print(" *                                                                  * ")
print(" * Descripción:                                                     * ")
print(" * Peso de Hamming                                                  * ")
print(" * * * * * * * * * * * * * * * * * * * * * * * * * * *  * * * * * * * ")
print(" ")
print(" ")

"""
Descripción del ejercicio:
El peso de Hamming de un número es la cantidad de bits que están encendidos (es decir, cuántos '1' tiene su representación binaria).
Por ejemplo:
    hamming_weight(10) => binario: 1010  => 2 bits encendidos
    hamming_weight(21) => binario: 10101 => 3 bits encendidos

Restricción: No se pueden usar operaciones con cadenas como bin(), format(), str(), etc.
Se debe resolver usando operaciones matemáticas simples o bit a bit.
"""

def hamming_weight(n: int) -> int:
    """
    Esta función cuenta cuántos bits '1' hay en la representación binaria de un número entero positivo n.
    Para lograrlo, usa el operador AND (&) y desplazamiento a la derecha (//2), sin convertir a cadena.

    :param n: Número entero positivo
    :return: Cantidad de bits encendidos ('1') en su representación binaria
    """
    contador = 0
    while n > 0:
        # Si el bit menos significativo es 1, sumamos al contador
        if n % 2 == 1:    # También se puede usar: if n & 1:
            contador += 1
        n = n // 2        # Eliminamos el bit menos significativo y repetimos
    return contador


# PRUEBAS DEL CÓDIGO:
if __name__ == '__main__':
    print("Prueba 1: hamming_weight(10)  =>", hamming_weight(10))    # Esperado: 2 (1010)
    print("Prueba 2: hamming_weight(21)  =>", hamming_weight(21))    # Esperado: 3 (10101)
    print("Prueba 3: hamming_weight(0)   =>", hamming_weight(0))     # Esperado: 0
    print("Prueba 4: hamming_weight(255) =>", hamming_weight(255))   # Esperado: 8 (11111111)
    print("Prueba 5: hamming_weight(1)   =>", hamming_weight(1))     # Esperado: 1 (1)


"""


"""

